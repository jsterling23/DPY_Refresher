from django.shortcuts import render, HttpResponse, get_object_or_404, redirect
from django.urls import reverse
from django.http import Http404
from django.views import generic
from django.utils import timezone

from .models import *

class IndexView(generic.ListView):
    template_name = 'polls/index.html'
    context_object_name = 'latest_question_list'

    def get_queryset(self):

        return Question.objects.filter(pub_date__lte=timezone.now()).order_by('-pub_date')[:5]

# def index(req):
#     latest_question_list = Question.objects.order_by('-pub_date')[:5]
#     template = 'polls/index.html'
#     context = {
#         'latest_question_list': latest_question_list,
#     }
#     return render(req, template, context)



class DetailView(generic.DetailView):
    model = Question
    template_name = 'polls/detail.html'

    def get_queryset(self):
        return Question.objects.filter(pub_date__lte=timezone.now())
# def detail(req, question_id):
#     template = 'polls/detail.html'
#     question = get_object_or_404(Question, pk=question_id)
#     context = {
#         'question':question
#     }
#     return render(req, template, context)


class ResultsView(generic.DetailView):
    model = Question
    template_name = 'polls/results.html'
# def results(req, question_id):
#     template = 'polls/results.html'
#     question = get_object_or_404(Question, pk=question_id)
#     context = {
#         'question':question
#     }
#     return render(req, template, context)



def vote(req, question_id):
    question = get_object_or_404(Question, pk=question_id)
    try:
        selected_choice = question.choice_set.get(pk=req.POST['choice'])
    except (KeyError, Choice.DoesNotExist):
        error_message = "You forgot to select anything you idiot"
        return render(req, 'polls/detail.html', {
            'question':question,
            'error_message':error_message,
        })
    else:
        selected_choice.votes += 1
        selected_choice.save()

        return redirect(reverse('polls:results', kwargs={'pk':question_id}))
    




    ##################################################################################
#     We’re using two generic views here: ListView and DetailView. Respectively, those two views abstract the concepts of “display a list of objects” and “display a detail page for a particular type of object.”

#     Each generic view needs to know what model it will be acting upon. This is provided using the model attribute.
#     The DetailView generic view expects the primary key value captured from the URL to be called "pk", so we’ve changed question_id to pk for the generic views.

# By default, the DetailView generic view uses a template called <app name>/<model name>_detail.html. In our case, it would use the template "polls/question_detail.html". The template_name attribute is used to tell Django to use a specific template name instead of the autogenerated default template name. We also specify the template_name for the results list view – this ensures that the results view and the detail view have a different appearance when rendered, even though they’re both a DetailView behind the scenes.

# Similarly, the ListView generic view uses a default template called <app name>/<model name>_list.html; we use template_name to tell ListView to use our existing "polls/index.html" template.

# In previous parts of the tutorial, the templates have been provided with a context that contains the question and latest_question_list context variables. For DetailView the question variable is provided automatically – since we’re using a Django model (Question), Django is able to determine an appropriate name for the context variable. However, for ListView, the automatically generated context variable is question_list. To override this we provide the context_object_name attribute, specifying that we want to use latest_question_list instead. As an alternative approach, you could change your templates to match the new default context variables – but it’s a lot easier to just tell Django to use the variable you want.

# Run the server, and use your new polling app based on generic views.

# For full details on generic views, see the generic views documentation.

# When you’re comfortable with forms and generic views, read part 5 of this tutorial to learn about testing our polls app.